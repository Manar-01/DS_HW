public class Cipher {
    
private char upperCase[]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
private char lowerCase[]={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};

/*  encoder(plineText, number)
        array of alphabet in upper case
        array of alphabet in lower case
        cipherText=""
        LOOP i=0 UNTIL lenght(plineText)-1
            IF plineText(i)>='A' && plineText(i)<='Z' THEN
                LOOP j = 0 UNTIL length(upperCase)-1 
                    IF plineText(i)=upperCase[j] THEN
                        BREAK
                cipherText=cipherText+upperCase[(j+number)%length(upperCase)]
            ELSE
                IF plineText(i)>='a' && plineText(i)<='z' THEN
                    LOOP j = 0 UNTIL length(lowerCase)-1
                        IF plineText(i)=lowerCase[j] THEN
                            BREAK
                    cipherText=cipherText+lowerCase[(j+number)%length(lowerCase)]
                ELSE
                    cipherText=cipherText+plainText(i)
        return cipherText
*/
    public String encoder(String plineText,int number){
        String cipherText="";
        int j;
        for (int i = 0; i <plineText.length(); i++) {
            if(plineText.charAt(i)>='A'&&plineText.charAt(i)<='Z'){ //if current letter in upper case then
                for (j = 0; j < upperCase.length; j++) {
                    if(plineText.charAt(i)==upperCase[j]) //search for number of letter in alphabet
                        break;
                }
                cipherText+=upperCase[(j+number)%upperCase.length]; //add number & if additional result is more than 26 it will back to beganing 
            }
            else if(plineText.charAt(i)>='a'&&plineText.charAt(i)<='z'){ //doing the same things in above but if letter in lower case
                for (j = 0; j < lowerCase.length; j++) {
                    if(plineText.charAt(i)==lowerCase[j])
                        break;
                }
                cipherText+=lowerCase[(j+number)%lowerCase.length];
            }
            else
            cipherText+=plineText.charAt(i);
        }
        return cipherText;
    }
    decoder(cipherText, number)
        array of alphabet in upper case
        array of alphabet in lower case
        plineText=""
        LOOP i=0 UNTIL lenght(plineText)-1
            IF cipherText(i)>='A' && cipherText(i)<='Z' THEN
                LOOP j = 0 UNTIL length(upperCase)-1 
                    IF cipherText(i)=upperCase[j] THEN
                        BREAK
                plineText=plineText+upperCase[(length(upperCase)+(j-number))%length(upperCase)]
            ELSE
                IF cipherText(i)>='a' && cipherText(i)<='z' THEN
                    LOOP j = 0 UNTIL length(lowerCase)-1
                        IF cipherText(i)=lowerCase[j] THEN
                            BREAK
                    plineText=plineText+lowerCase[(length(lowerCase)+(j-number))%length(lowerCase)]
                ELSE
                    plineText=plineText+cipherText(i)
        return plineText
*/

 public String decoder(String cipherText ,int number){
        String plineText="";
        int j;
        for (int i = 0; i <cipherText.length(); i++) {
            if(cipherText.charAt(i)>='A'&&cipherText.charAt(i)<='Z'){ //if current letter in upper case then
                for (j = 0; j < upperCase.length; j++) {
                    if(cipherText.charAt(i)==upperCase[j]) //search for number of letter in alphabet
                        break;
                }
                plineText+=upperCase[(upperCase.length+(j-number))%upperCase.length]; //Subtract number & if Subtraction result is less than 0 it will back to Ending 
            }
            else if(cipherText.charAt(i)>='a'&&cipherText.charAt(i)<='z'){ //doing the same things in above but if letter in lower case
                for (j = 0; j < lowerCase.length; j++) {
                    if(cipherText.charAt(i)==lowerCase[j])
                        break;
                }
                plineText+=lowerCase[(lowerCase.length+(j-number))%lowerCase.length];
            }
            else
            plineText+=cipherText.charAt(i);
        }
        return plineText;
}


